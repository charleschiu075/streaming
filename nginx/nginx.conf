user nginx;
worker_processes auto;

# 將錯誤日誌輸出到標準錯誤流，由 Docker 管理
error_log /dev/stderr warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

rtmp {
    server {
        listen 1935;
        chunk_size 4096;
        allow play all;
        
        application live {
            live on;
            record off;
            
            # 串流驗證 (可選：如果API服務尚未準備好，可以暫時註釋掉)
            on_publish http://api:5000/stream/verify;
            on_publish_done http://api:5000/stream/end;
            
            # 允許所有 IP 推流
            allow publish all;
            
            # HLS 設定
            hls on;
            hls_path /tmp/hls;
            hls_fragment 3;
            hls_playlist_length 60;
            hls_continuous on;
            hls_cleanup on;
            hls_nested on;
            
            # DASH 設定
            dash on;
            dash_path /tmp/dash;
            dash_fragment 3;
            dash_playlist_length 60;
            dash_cleanup on;
            dash_nested on;
            
            # 推流認證超時設定
            play_time_fix on;
            publish_time_fix on;
        }
    }
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # 日誌格式設定
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /dev/stdout main;
    
    # 基本設定
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # 添加客戶端請求大小限制
    client_max_body_size 100m;
    
    # GZIP 壓縮
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # 上游伺服器設定
    upstream api_backend {
        server api:5000;
        keepalive 32;
    }

    # 伺服器設定
    server {
        listen 80;
        server_name localhost 3.107.21.209;
        
        # 安全頭設定
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        
        # 靜態檔案目錄
        root /usr/share/nginx/html;
        index index.html;
        
        # 靜態文件處理
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        # 特定頁面路由
        location = /login {
            try_files /login.html =404;
        }
        
        location = /register {
            try_files /register.html =404;
        }
        
        location = /dashboard {
            try_files /dashboard.html =404;
        }
        
        location = /watch {
            try_files /watch.html =404;
        }
        
        # API 代理
        location /api/ {
            rewrite ^/api/(.*) /$1 break;
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 超時設定
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # CORS 設置
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
            
            # 處理 OPTIONS 請求
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' '*';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }
        
        # 串流相關設置
        location /hls {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /tmp;
            add_header Cache-Control no-cache always;
            add_header Access-Control-Allow-Origin * always;
            
            # 添加 CORS 頭以支持跨域訪問
            add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Range' always;
        }
        
        location /dash {
            types {
                application/dash+xml mpd;
                video/mp4 mp4;
                video/webm webm;
            }
            root /tmp;
            add_header Cache-Control no-cache always;
            add_header Access-Control-Allow-Origin * always;
            
            # 添加 CORS 頭以支持跨域訪問
            add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Range' always;
        }
        
        # RTMP 統計信息
        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
            add_header Access-Control-Allow-Origin * always;
        }
        
        location /stat.xsl {
            root /usr/share/nginx/html;
        }
        
        # 健康檢查
        location = /nginx-health {
            access_log off;
            return 200 'healthy\n';
            add_header Content-Type text/plain;
        }
    }
}