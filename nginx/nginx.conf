worker_processes auto;
# 將錯誤日誌輸出到標準錯誤流，由 Docker 管理
error_log /dev/stderr warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

rtmp {
    server {
        listen 1935;
        chunk_size 4096;
        allow play all;

        application live {
            live on;
            record off;

            # 使用 Docker 內部網路名稱
            on_publish http://api:5000/api/stream/verify;

            # 允許所有 IP 推流 (開發環境)
            allow publish all;

            # HLS 設定
            hls on;
            hls_path /tmp/hls;
            hls_fragment 3;
            hls_playlist_length 60;
            hls_continuous on;
            hls_cleanup on;

            # DASH 設定 (可選)
            dash on;
            dash_path /tmp/dash;
            dash_fragment 3;
            dash_playlist_length 60;
            dash_cleanup on;
        }
    }
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 優化設定
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    # 將訪問日誌輸出到標準輸出，錯誤日誌到標準錯誤流
    access_log /dev/stdout;
    error_log /dev/stderr warn;

    server {
        listen 80;
        server_name localhost;

        # HLS 串流端點
        location /hls {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /tmp;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods GET,POST,OPTIONS;
            add_header Access-Control-Allow-Headers Content-Type;
        }

        # DASH 串流端點
        location /dash {
            types {
                application/dash+xml mpd;
                video/mp4 mp4;
            }
            root /tmp;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin *;
        }

        # 靜態文件
        location / {
            root /app/public;
            index login.html;
            try_files $uri $uri/ /login.html;
        }

        # 代理 API 請求到後端
        location /api/ {
            proxy_pass http://api:5000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # 健康檢查
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
     